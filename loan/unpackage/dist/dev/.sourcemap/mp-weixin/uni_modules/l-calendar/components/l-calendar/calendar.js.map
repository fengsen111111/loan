{"version":3,"file":"calendar.js","sources":["uni_modules/l-calendar/components/l-calendar/calendar.js"],"sourcesContent":["/**\n * @1900-2100区间内的公历、农历互转\n * @公历转农历：solar2lunar\n * @农历转公历：lunar2solar \n */\nlet calendar = {\n\t/**\n\t * 农历1900-2100的润大小信息表\n\t * @Array Of Property\n\t * @return Hex\n\t */\n\tlunarInfo: [0x04bd8, 0x04ae0, 0x0a570, 0x054d5, 0x0d260, 0x0d950, 0x16554, 0x056a0, 0x09ad0, 0x055d2, //1900-1909\n\t\t0x04ae0, 0x0a5b6, 0x0a4d0, 0x0d250, 0x1d255, 0x0b540, 0x0d6a0, 0x0ada2, 0x095b0, 0x14977, //1910-1919\n\t\t0x04970, 0x0a4b0, 0x0b4b5, 0x06a50, 0x06d40, 0x1ab54, 0x02b60, 0x09570, 0x052f2, 0x04970, //1920-1929\n\t\t0x06566, 0x0d4a0, 0x0ea50, 0x06e95, 0x05ad0, 0x02b60, 0x186e3, 0x092e0, 0x1c8d7, 0x0c950, //1930-1939\n\t\t0x0d4a0, 0x1d8a6, 0x0b550, 0x056a0, 0x1a5b4, 0x025d0, 0x092d0, 0x0d2b2, 0x0a950, 0x0b557, //1940-1949\n\t\t0x06ca0, 0x0b550, 0x15355, 0x04da0, 0x0a5b0, 0x14573, 0x052b0, 0x0a9a8, 0x0e950, 0x06aa0, //1950-1959\n\t\t0x0aea6, 0x0ab50, 0x04b60, 0x0aae4, 0x0a570, 0x05260, 0x0f263, 0x0d950, 0x05b57, 0x056a0, //1960-1969\n\t\t0x096d0, 0x04dd5, 0x04ad0, 0x0a4d0, 0x0d4d4, 0x0d250, 0x0d558, 0x0b540, 0x0b6a0, 0x195a6, //1970-1979\n\t\t0x095b0, 0x049b0, 0x0a974, 0x0a4b0, 0x0b27a, 0x06a50, 0x06d40, 0x0af46, 0x0ab60, 0x09570, //1980-1989\n\t\t0x04af5, 0x04970, 0x064b0, 0x074a3, 0x0ea50, 0x06b58, 0x055c0, 0x0ab60, 0x096d5, 0x092e0, //1990-1999\n\t\t0x0c960, 0x0d954, 0x0d4a0, 0x0da50, 0x07552, 0x056a0, 0x0abb7, 0x025d0, 0x092d0, 0x0cab5, //2000-2009\n\t\t0x0a950, 0x0b4a0, 0x0baa4, 0x0ad50, 0x055d9, 0x04ba0, 0x0a5b0, 0x15176, 0x052b0, 0x0a930, //2010-2019\n\t\t0x07954, 0x06aa0, 0x0ad50, 0x05b52, 0x04b60, 0x0a6e6, 0x0a4e0, 0x0d260, 0x0ea65, 0x0d530, //2020-2029\n\t\t0x05aa0, 0x076a3, 0x096d0, 0x04afb, 0x04ad0, 0x0a4d0, 0x1d0b6, 0x0d250, 0x0d520, 0x0dd45, //2030-2039\n\t\t0x0b5a0, 0x056d0, 0x055b2, 0x049b0, 0x0a577, 0x0a4b0, 0x0aa50, 0x1b255, 0x06d20, 0x0ada0, //2040-2049\n\t\t0x14b63, 0x09370, 0x049f8, 0x04970, 0x064b0, 0x168a6, 0x0ea50, 0x06b20, 0x1a6c4, 0x0aae0, //2050-2059\n\t\t0x0a2e0, 0x0d2e3, 0x0c960, 0x0d557, 0x0d4a0, 0x0da50, 0x05d55, 0x056a0, 0x0a6d0, 0x055d4, //2060-2069\n\t\t0x052d0, 0x0a9b8, 0x0a950, 0x0b4a0, 0x0b6a6, 0x0ad50, 0x055a0, 0x0aba4, 0x0a5b0, 0x052b0, //2070-2079\n\t\t0x0b273, 0x06930, 0x07337, 0x06aa0, 0x0ad50, 0x14b55, 0x04b60, 0x0a570, 0x054e4, 0x0d160, //2080-2089\n\t\t0x0e968, 0x0d520, 0x0daa0, 0x16aa6, 0x056d0, 0x04ae0, 0x0a9d4, 0x0a2d0, 0x0d150, 0x0f252, //2090-2099\n\t\t0x0d520\n\t], //2100\n\t/**\n\t * 公历每个月份的天数普通表\n\t * @Array Of Property\n\t * @return Number\n\t */\n\tsolarMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n\t/**\n\t * 天干地支之天干速查表\n\t * @Array Of Property trans[\"甲\",\"乙\",\"丙\",\"丁\",\"戊\",\"己\",\"庚\",\"辛\",\"壬\",\"癸\"]\n\t * @return Cn string\n\t */\n\tGan: [\"\\u7532\", \"\\u4e59\", \"\\u4e19\", \"\\u4e01\", \"\\u620a\", \"\\u5df1\", \"\\u5e9a\", \"\\u8f9b\", \"\\u58ec\", \"\\u7678\"],\n\t/**\n\t * 天干地支之地支速查表\n\t * @Array Of Property\n\t * @trans[\"子\",\"丑\",\"寅\",\"卯\",\"辰\",\"巳\",\"午\",\"未\",\"申\",\"酉\",\"戌\",\"亥\"]\n\t * @return Cn string\n\t */\n\tZhi: [\"\\u5b50\", \"\\u4e11\", \"\\u5bc5\", \"\\u536f\", \"\\u8fb0\", \"\\u5df3\", \"\\u5348\", \"\\u672a\", \"\\u7533\", \"\\u9149\", \"\\u620c\",\n\t\t\"\\u4ea5\"\n\t],\n\t/**\n\t * 天干地支之地支速查表<=>生肖\n\t * @Array Of Property\n\t * @trans[\"鼠\",\"牛\",\"虎\",\"兔\",\"龙\",\"蛇\",\"马\",\"羊\",\"猴\",\"鸡\",\"狗\",\"猪\"]\n\t * @return Cn string\n\t */\n\tAnimals: [\"\\u9f20\", \"\\u725b\", \"\\u864e\", \"\\u5154\", \"\\u9f99\", \"\\u86c7\", \"\\u9a6c\", \"\\u7f8a\", \"\\u7334\", \"\\u9e21\",\n\t\t\"\\u72d7\", \"\\u732a\"\n\t],\n\t/**\n\t * 24节气速查表\n\t * @Array Of Property\n\t * @trans[\"小寒\",\"大寒\",\"立春\",\"雨水\",\"惊蛰\",\"春分\",\"清明\",\"谷雨\",\"立夏\",\"小满\",\"芒种\",\"夏至\",\"小暑\",\"大暑\",\"立秋\",\"处暑\",\"白露\",\"秋分\",\"寒露\",\"霜降\",\"立冬\",\"小雪\",\"大雪\",\"冬至\"]\n\t * @return Cn string\n\t */\n\tsolarTerm: [\"\\u5c0f\\u5bd2\", \"\\u5927\\u5bd2\", \"\\u7acb\\u6625\", \"\\u96e8\\u6c34\", \"\\u60ca\\u86f0\", \"\\u6625\\u5206\",\n\t\t\"\\u6e05\\u660e\", \"\\u8c37\\u96e8\", \"\\u7acb\\u590f\", \"\\u5c0f\\u6ee1\", \"\\u8292\\u79cd\", \"\\u590f\\u81f3\", \"\\u5c0f\\u6691\",\n\t\t\"\\u5927\\u6691\", \"\\u7acb\\u79cb\", \"\\u5904\\u6691\", \"\\u767d\\u9732\", \"\\u79cb\\u5206\", \"\\u5bd2\\u9732\", \"\\u971c\\u964d\",\n\t\t\"\\u7acb\\u51ac\", \"\\u5c0f\\u96ea\", \"\\u5927\\u96ea\", \"\\u51ac\\u81f3\"\n\t],\n\t/**\n\t * 1900-2100各年的24节气日期速查表\n\t * @Array Of Property\n\t * @return 0x string For splice\n\t */\n\tsTermInfo: ['9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f',\n\t\t'97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',\n\t\t'97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa',\n\t\t'97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f',\n\t\t'b027097bd097c36b0b6fc9274c91aa', '9778397bd19801ec9210c965cc920e', '97b6b97bd19801ec95f8c965cc920f',\n\t\t'97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd197c36c9210c9274c91aa',\n\t\t'97b6b97bd19801ec95f8c965cc920e', '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2',\n\t\t'9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec95f8c965cc920e', '97bcf97c3598082c95f8e1cfcc920f',\n\t\t'97bd097bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e',\n\t\t'97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',\n\t\t'97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722',\n\t\t'9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f',\n\t\t'97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',\n\t\t'97bcf97c359801ec95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',\n\t\t'97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd07f595b0b6fc920fb0722',\n\t\t'9778397bd097c36b0b6fc9210c8dc2', '9778397bd19801ec9210c9274c920e', '97b6b97bd19801ec95f8c965cc920f',\n\t\t'97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e',\n\t\t'97b6b97bd19801ec95f8c965cc920f', '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2',\n\t\t'9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bd07f1487f595b0b0bc920fb0722',\n\t\t'7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',\n\t\t'97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',\n\t\t'97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',\n\t\t'9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f531b0b0bb0b6fb0722',\n\t\t'7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',\n\t\t'97bcf7f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',\n\t\t'97b6b97bd19801ec9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',\n\t\t'9778397bd097c36b0b6fc9210c91aa', '97b6b97bd197c36c9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722',\n\t\t'7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e',\n\t\t'97b6b7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2',\n\t\t'9778397bd097c36b0b70c9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722',\n\t\t'7f0e397bd097c35b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721',\n\t\t'7f0e27f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',\n\t\t'97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',\n\t\t'9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',\n\t\t'7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721',\n\t\t'7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9274c91aa',\n\t\t'97b6b7f0e47f531b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',\n\t\t'9778397bd097c36b0b6fc9210c91aa', '97b6b7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',\n\t\t'7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '977837f0e37f149b0723b0787b0721',\n\t\t'7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c35b0b6fc9210c8dc2',\n\t\t'977837f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722',\n\t\t'7f0e397bd097c35b0b6fc9210c8dc2', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',\n\t\t'7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '977837f0e37f14998082b0787b06bd',\n\t\t'7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',\n\t\t'977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',\n\t\t'7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',\n\t\t'7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd',\n\t\t'7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',\n\t\t'977837f0e37f14998082b0723b06bd', '7f07e7f0e37f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',\n\t\t'7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721',\n\t\t'7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e37f0e37f14898082b0723b02d5',\n\t\t'7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f531b0b0bb0b6fb0722',\n\t\t'7f0e37f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',\n\t\t'7f0e37f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd',\n\t\t'7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35',\n\t\t'7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',\n\t\t'7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f149b0723b0787b0721',\n\t\t'7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0723b06bd',\n\t\t'7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e37f0e366aa89801eb072297c35',\n\t\t'7ec967f0e37f14998082b0723b06bd', '7f07e7f0e37f14998083b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',\n\t\t'7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14898082b0723b02d5', '7f07e7f0e37f14998082b0787b0721',\n\t\t'7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66aa89801e9808297c35', '665f67f0e37f14898082b0723b02d5',\n\t\t'7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66a449801e9808297c35',\n\t\t'665f67f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',\n\t\t'7f0e36665b66a449801e9808297c35', '665f67f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd',\n\t\t'7f07e7f0e47f531b0723b0b6fb0721', '7f0e26665b66a449801e9808297c35', '665f67f0e37f1489801eb072297c35',\n\t\t'7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722'\n\t],\n\t/**\n\t * 数字转中文速查表\n\t * @Array Of Property\n\t * @trans ['日','一','二','三','四','五','六','七','八','九','十']\n\t * @return Cn string\n\t */\n\tnStr1: [\"\\u65e5\", \"\\u4e00\", \"\\u4e8c\", \"\\u4e09\", \"\\u56db\", \"\\u4e94\", \"\\u516d\", \"\\u4e03\", \"\\u516b\", \"\\u4e5d\", \"\\u5341\"],\n\t/**\n\t * 日期转农历称呼速查表\n\t * @Array Of Property\n\t * @trans ['初','十','廿','卅']\n\t * @return Cn string\n\t */\n\tnStr2: [\"\\u521d\", \"\\u5341\", \"\\u5eff\", \"\\u5345\"],\n\t/**\n\t * 月份转农历称呼速查表\n\t * @Array Of Property\n\t * @trans ['正','一','二','三','四','五','六','七','八','九','十','冬','腊']\n\t * @return Cn string\n\t */\n\tnStr3: [\"\\u6b63\", \"\\u4e8c\", \"\\u4e09\", \"\\u56db\", \"\\u4e94\", \"\\u516d\", \"\\u4e03\", \"\\u516b\", \"\\u4e5d\", \"\\u5341\", \"\\u51ac\",\n\t\t\"\\u814a\"\n\t],\n\t/**\n\t * 返回农历y年一整年的总天数\n\t * @param lunar Year\n\t * @return Number\n\t * @eg:let count = calendar.lYearDays(1987) ;//count=387\n\t */\n\tlYearDays: function(y) {\n\t\tlet i, sum = 348;\n\t\tfor (i = 0x8000; i > 0x8; i >>= 1) {\n\t\t\tsum += (calendar.lunarInfo[y - 1900] & i) ? 1 : 0;\n\t\t}\n\t\treturn (sum + calendar.leapDays(y));\n\t},\n\t/**\n\t * 返回农历y年闰月是哪个月；若y年没有闰月 则返回0\n\t * @param lunar Year\n\t * @return Number (0-12)\n\t * @eg:let leapMonth = calendar.leapMonth(1987) ;//leapMonth=6\n\t */\n\tleapMonth: function(y) { //闰字编码 \\u95f0\n\t\treturn (calendar.lunarInfo[y - 1900] & 0xf);\n\t},\n\t/**\n\t * 返回农历y年闰月的天数 若该年没有闰月则返回0\n\t * @param lunar Year\n\t * @return Number (0、29、30)\n\t * @eg:let leapMonthDay = calendar.leapDays(1987) ;//leapMonthDay=29\n\t */\n\tleapDays: function(y) {\n\t\tif (calendar.leapMonth(y)) {\n\t\t\treturn ((calendar.lunarInfo[y - 1900] & 0x10000) ? 30 : 29);\n\t\t}\n\t\treturn (0);\n\t},\n\t/**\n\t * 返回农历y年m月（非闰月）的总天数，计算m为闰月时的天数请使用leapDays方法\n\t * @param lunar Year\n\t * @return Number (-1、29、30)\n\t * @eg:let MonthDay = calendar.monthDays(1987,9) ;//MonthDay=29\n\t */\n\tmonthDays: function(y, m) {\n\t\tif (m > 12 || m < 1) {\n\t\t\treturn -1\n\t\t} //月份参数从1至12，参数错误返回-1\n\t\treturn ((calendar.lunarInfo[y - 1900] & (0x10000 >> m)) ? 30 : 29);\n\t},\n\t/**\n\t * 返回公历(!)y年m月的天数\n\t * @param solar Year\n\t * @return Number (-1、28、29、30、31)\n\t * @eg:let solarMonthDay = calendar.leapDays(1987) ;//solarMonthDay=30\n\t */\n\tsolarDays: function(y, m) {\n\t\tif (m > 12 || m < 1) {\n\t\t\treturn -1\n\t\t} //若参数错误 返回-1\n\t\tlet ms = m - 1;\n\t\tif (ms == 1) { //2月份的闰平规律测算后确认返回28或29\n\t\t\treturn (((y % 4 == 0) && (y % 100 != 0) || (y % 400 == 0)) ? 29 : 28);\n\t\t} else {\n\t\t\treturn (calendar.solarMonth[ms]);\n\t\t}\n\t},\n\t/**\n\t * 农历年份转换为干支纪年\n\t * @param lYear 农历年的年份数\n\t * @return Cn string\n\t */\n\ttoGanZhiYear: function(lYear) {\n\t\tlet ganKey = (lYear - 3) % 10;\n\t\tlet zhiKey = (lYear - 3) % 12;\n\t\tif (ganKey == 0) ganKey = 10; //如果余数为0则为最后一个天干\n\t\tif (zhiKey == 0) zhiKey = 12; //如果余数为0则为最后一个地支\n\t\treturn calendar.Gan[ganKey - 1] + calendar.Zhi[zhiKey - 1];\n\t},\n\t/**\n\t * 公历月、日判断所属星座\n\t * @param cMonth [description]\n\t * @param cDay [description]\n\t * @return Cn string\n\t */\n\ttoAstro: function(cMonth, cDay) {\n\t\tlet s =\n\t\t\t\"\\u9b54\\u7faf\\u6c34\\u74f6\\u53cc\\u9c7c\\u767d\\u7f8a\\u91d1\\u725b\\u53cc\\u5b50\\u5de8\\u87f9\\u72ee\\u5b50\\u5904\\u5973\\u5929\\u79e4\\u5929\\u874e\\u5c04\\u624b\\u9b54\\u7faf\";\n\t\tlet arr = [20, 19, 21, 21, 21, 22, 23, 23, 23, 23, 22, 22];\n\t\treturn s.substr(cMonth * 2 - (cDay < arr[cMonth - 1] ? 2 : 0), 2) + \"\\u5ea7\"; //座\n\t},\n\t/**\n\t * 传入offset偏移量返回干支\n\t * @param offset 相对甲子的偏移量\n\t * @return Cn string\n\t */\n\ttoGanZhi: function(offset) {\n\t\treturn calendar.Gan[offset % 10] + calendar.Zhi[offset % 12];\n\t},\n\t/**\n\t * 传入公历(!)y年获得该年第n个节气的公历日期\n\t * @param y公历年(1900-2100)；n二十四节气中的第几个节气(1~24)；从n=1(小寒)算起\n\t * @return day Number\n\t * @eg:let _24 = calendar.getTerm(1987,3) ;//_24=4;意即1987年2月4日立春\n\t */\n\tgetTerm: function(y, n) {\n\t\tif (y < 1900 || y > 2100) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (n < 1 || n > 24) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet _table = calendar.sTermInfo[y - 1900];\n\t\tlet _info = [\n\t\t\tparseInt('0x' + _table.substr(0, 5)).toString(),\n\t\t\tparseInt('0x' + _table.substr(5, 5)).toString(),\n\t\t\tparseInt('0x' + _table.substr(10, 5)).toString(),\n\t\t\tparseInt('0x' + _table.substr(15, 5)).toString(),\n\t\t\tparseInt('0x' + _table.substr(20, 5)).toString(),\n\t\t\tparseInt('0x' + _table.substr(25, 5)).toString()\n\t\t];\n\t\tlet _calday = [\n\t\t\t_info[0].substr(0, 1),\n\t\t\t_info[0].substr(1, 2),\n\t\t\t_info[0].substr(3, 1),\n\t\t\t_info[0].substr(4, 2),\n\t\t\t_info[1].substr(0, 1),\n\t\t\t_info[1].substr(1, 2),\n\t\t\t_info[1].substr(3, 1),\n\t\t\t_info[1].substr(4, 2),\n\t\t\t_info[2].substr(0, 1),\n\t\t\t_info[2].substr(1, 2),\n\t\t\t_info[2].substr(3, 1),\n\t\t\t_info[2].substr(4, 2),\n\t\t\t_info[3].substr(0, 1),\n\t\t\t_info[3].substr(1, 2),\n\t\t\t_info[3].substr(3, 1),\n\t\t\t_info[3].substr(4, 2),\n\t\t\t_info[4].substr(0, 1),\n\t\t\t_info[4].substr(1, 2),\n\t\t\t_info[4].substr(3, 1),\n\t\t\t_info[4].substr(4, 2),\n\t\t\t_info[5].substr(0, 1),\n\t\t\t_info[5].substr(1, 2),\n\t\t\t_info[5].substr(3, 1),\n\t\t\t_info[5].substr(4, 2),\n\t\t];\n\t\treturn parseInt(_calday[n - 1]);\n\t},\n\t/**\n\t * 传入农历数字月份返回汉语通俗表示法\n\t * @param lunar month\n\t * @return Cn string\n\t * @eg:let cnMonth = calendar.toChinaMonth(12) ;//cnMonth='腊月'\n\t */\n\ttoChinaMonth: function(m) { // 月 => \\u6708\n\t\tif (m > 12 || m < 1) {\n\t\t\treturn -1\n\t\t} //若参数错误 返回-1\n\t\tlet s = calendar.nStr3[m - 1];\n\t\ts += \"\\u6708\"; //加上月字\n\t\treturn s;\n\t},\n\t/**\n\t * 传入农历日期数字返回汉字表示法\n\t * @param lunar day\n\t * @return Cn string\n\t * @eg:let cnDay = calendar.toChinaDay(21) ;//cnMonth='廿一'\n\t */\n\ttoChinaDay: function(d) { //日 => \\u65e5\n\t\tlet s;\n\t\tswitch (d) {\n\t\t\tcase 10:\n\t\t\t\ts = '\\u521d\\u5341';\n\t\t\t\tbreak;\n\t\t\tcase 20:\n\t\t\t\ts = '\\u4e8c\\u5341';\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\tcase 30:\n\t\t\t\ts = '\\u4e09\\u5341';\n\t\t\t\tbreak;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ts = calendar.nStr2[Math.floor(d / 10)];\n\t\t\t\ts += calendar.nStr1[d % 10];\n\t\t}\n\t\treturn (s);\n\t},\n\t/**\n\t * 年份转生肖[!仅能大致转换] => 精确划分生肖分界线是“立春”\n\t * @param y year\n\t * @return Cn string\n\t * @eg:let animal = calendar.getAnimal(1987) ;//animal='兔'\n\t */\n\tgetAnimal: function(y) {\n\t\treturn calendar.Animals[(y - 4) % 12]\n\t},\n\t/**\n\t * 传入阳历年月日获得详细的公历、农历object信息 <=>JSON\n\t * @param y solar year\n\t * @param m solar month\n\t * @param d solar day\n\t * @return JSON object\n\t * @eg:console.log(calendar.solar2lunar(1987,11,01));\n\t */\n\tsolar2lunar: function(y, m, d) { //参数区间1900.1.31~2100.12.31\n\t\tif (y < 1900 || y > 2100) {\n\t\t\treturn -1;\n\t\t} //年份限定、上限\n\t\tif (y == 1900 && m == 1 && d < 31) {\n\t\t\treturn -1;\n\t\t} //下限\n\t\tlet objDate;\n\t\tif (!y) { //未传参 获得当天\n\t\t\t objDate = new Date();\n\t\t} else {\n\t\t\t objDate = new Date(y, parseInt(m) - 1, d)\n\t\t}\n\t\tlet i, leap = 0,\n\t\t\ttemp = 0;\n\t\t//修正ymd参数\n\t\ty = objDate.getFullYear();\n\t\tm = objDate.getMonth() + 1;\n\t\td = objDate.getDate();\n\t\tlet offset = (Date.UTC(objDate.getFullYear(), objDate.getMonth(), objDate.getDate()) - Date.UTC(1900, 0, 31)) /\n\t\t\t86400000;\n\t\tfor (i = 1900; i < 2101 && offset > 0; i++) {\n\t\t\ttemp = calendar.lYearDays(i);\n\t\t\toffset -= temp;\n\t\t}\n\t\tif (offset < 0) {\n\t\t\toffset += temp;\n\t\t\ti--;\n\t\t}\n\t\t//是否今天\n\t\tlet isTodayObj = new Date(),\n\t\t\tisToday = false;\n\t\tif (isTodayObj.getFullYear() == y && isTodayObj.getMonth() + 1 == m && isTodayObj.getDate() == d) {\n\t\t\tisToday = true;\n\t\t}\n\t\t//星期几\n\t\tlet nWeek = objDate.getDay(),\n\t\t\tcWeek = calendar.nStr1[nWeek];\n\t\tif (nWeek == 0) {\n\t\t\tnWeek = 7;\n\t\t} //数字表示周几顺应天朝周一开始的惯例\n\t\t//农历年\n\t\tlet year = i;\n\t\tleap = calendar.leapMonth(i); //闰哪个月\n\t\tlet isLeap = false;\n\t\t//效验闰月\n\t\tfor (i = 1; i < 13 && offset > 0; i++) {\n\t\t\t//闰月\n\t\t\tif (leap > 0 && i == (leap + 1) && isLeap == false) {\n\t\t\t\t--i;\n\t\t\t\tisLeap = true;\n\t\t\t\ttemp = calendar.leapDays(year); //计算农历闰月天数\n\t\t\t} else {\n\t\t\t\ttemp = calendar.monthDays(year, i); //计算农历普通月天数\n\t\t\t}\n\t\t\t//解除闰月\n\t\t\tif (isLeap == true && i == (leap + 1)) {\n\t\t\t\tisLeap = false;\n\t\t\t}\n\t\t\toffset -= temp;\n\t\t}\n\t\tif (offset == 0 && leap > 0 && i == leap + 1)\n\t\t\tif (isLeap) {\n\t\t\t\tisLeap = false;\n\t\t\t} else {\n\t\t\t\tisLeap = true;\n\t\t\t\t--i;\n\t\t\t}\n\t\tif (offset < 0) {\n\t\t\toffset += temp;\n\t\t\t--i;\n\t\t}\n\t\t//农历月\n\t\tlet month = i;\n\t\t//农历日\n\t\tlet day = offset + 1;\n\t\t//天干地支处理\n\t\tlet sm = m - 1;\n\t\tlet gzY = calendar.toGanZhiYear(year);\n\t\t//月柱 1900年1月小寒以前为 丙子月(60进制12)\n\t\tlet firstNode = calendar.getTerm(year, (m * 2 - 1)); //返回当月「节」为几日开始\n\t\tlet secondNode = calendar.getTerm(year, (m * 2)); //返回当月「节」为几日开始\n\t\t//依据12节气修正干支月\n\t\tlet gzM = calendar.toGanZhi((y - 1900) * 12 + m + 11);\n\t\tif (d >= firstNode) {\n\t\t\tgzM = calendar.toGanZhi((y - 1900) * 12 + m + 12);\n\t\t}\n\t\t//传入的日期的节气与否\n\t\tlet isTerm = false;\n\t\tlet Term = null;\n\t\tif (firstNode == d) {\n\t\t\tisTerm = true;\n\t\t\tTerm = calendar.solarTerm[m * 2 - 2];\n\t\t}\n\t\tif (secondNode == d) {\n\t\t\tisTerm = true;\n\t\t\tTerm = calendar.solarTerm[m * 2 - 1];\n\t\t}\n\t\t//日柱 当月一日与 1900/1/1 相差天数\n\t\tlet dayCyclical = Date.UTC(y, sm, 1, 0, 0, 0, 0) / 86400000 + 25567 + 10;\n\t\tlet gzD = calendar.toGanZhi(dayCyclical + d - 1);\n\t\t//该日期所属的星座\n\t\tlet astro = calendar.toAstro(m, d);\n\t\treturn {\n\t\t\t'lYear': year,\n\t\t\t'lMonth': month,\n\t\t\t'lDay': day,\n\t\t\t'Animal': calendar.getAnimal(year),\n\t\t\t'IMonthCn': (isLeap ? \"\\u95f0\" : '') + calendar.toChinaMonth(month),\n\t\t\t'IDayCn': calendar.toChinaDay(day),\n\t\t\t'cYear': y,\n\t\t\t'cMonth': m,\n\t\t\t'cDay': d,\n\t\t\t'gzYear': gzY,\n\t\t\t'gzMonth': gzM,\n\t\t\t'gzDay': gzD,\n\t\t\t'isToday': isToday,\n\t\t\t'isLeap': isLeap,\n\t\t\t'nWeek': nWeek,\n\t\t\t'ncWeek': \"\\u661f\\u671f\" + cWeek,\n\t\t\t'isTerm': isTerm,\n\t\t\t'Term': Term,\n\t\t\t'astro': astro\n\t\t};\n\t},\n\t/**\n\t * 传入农历年月日以及传入的月份是否闰月获得详细的公历、农历object信息 <=>JSON\n\t * @param y lunar year\n\t * @param m lunar month\n\t * @param d lunar day\n\t * @param isLeapMonth lunar month is leap or not.[如果是农历闰月第四个参数赋值true即可]\n\t * @return JSON object\n\t * @eg:console.log(calendar.lunar2solar(1987,9,10));\n\t */\n\tlunar2solar: function(y, m, d, isLeapMonth) { //参数区间1900.1.31~2100.12.1\n\t\tisLeapMonth = !!isLeapMonth;\n\t\tlet leapOffset = 0;\n\t\tlet leapMonth = calendar.leapMonth(y);\n\t\tlet leapDay = calendar.leapDays(y);\n\t\tif (isLeapMonth && (leapMonth != m)) {\n\t\t\treturn -1;\n\t\t} //传参要求计算该闰月公历 但该年得出的闰月与传参的月份并不同\n\t\tif (y == 2100 && m == 12 && d > 1 || y == 1900 && m == 1 && d < 31) {\n\t\t\treturn -1;\n\t\t} //超出了最大极限值\n\t\tlet day = calendar.monthDays(y, m);\n\t\tlet _day = day;\n\t\t//bugFix 2016-9-25\n\t\t//if month is leap, _day use leapDays method\n\t\tif (isLeapMonth) {\n\t\t\t_day = calendar.leapDays(y, m);\n\t\t}\n\t\tif (y < 1900 || y > 2100 || d > _day) {\n\t\t\treturn -1;\n\t\t} //参数合法性效验\n\t\t//计算农历的时间差\n\t\tlet offset = 0;\n\t\tfor (let i = 1900; i < y; i++) {\n\t\t\toffset += calendar.lYearDays(i);\n\t\t}\n\t\tlet leap = 0,\n\t\t\tisAdd = false;\n\t\tfor (let i = 1; i < m; i++) {\n\t\t\tleap = calendar.leapMonth(y);\n\t\t\tif (!isAdd) { //处理闰月\n\t\t\t\tif (leap <= i && leap > 0) {\n\t\t\t\t\toffset += calendar.leapDays(y);\n\t\t\t\t\tisAdd = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\toffset += calendar.monthDays(y, i);\n\t\t}\n\t\t//转换闰月农历 需补充该年闰月的前一个月的时差\n\t\tif (isLeapMonth) {\n\t\t\toffset += day;\n\t\t}\n\t\t//1900年农历正月一日的公历时间为1900年1月30日0时0分0秒(该时间也是本农历的最开始起始点)\n\t\tlet stmap = Date.UTC(1900, 1, 30, 0, 0, 0);\n\t\tlet calObj = new Date((offset + d - 31) * 86400000 + stmap);\n\t\tlet cY = calObj.getUTCFullYear();\n\t\tlet cM = calObj.getUTCMonth() + 1;\n\t\tlet cD = calObj.getUTCDate();\n\t\treturn calendar.solar2lunar(cY, cM, cD);\n\t}\n};\n\nexport default {\n\tsolar2lunar: calendar.solar2lunar,\n\tlunar2solar: calendar.lunar2solar\n};"],"names":[],"mappings":";AAKA,IAAI,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMd,WAAW;AAAA,IAAC;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA;AAAA,IAC5F;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA;AAAA,IACjF;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA;AAAA,IACjF;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA;AAAA,IACjF;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA;AAAA,IACjF;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA;AAAA,IACjF;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA;AAAA,IACjF;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA;AAAA,IACjF;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA;AAAA,IACjF;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA;AAAA,IACjF;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA,IAAS;AAAA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A,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA,IACpE;AAAA,IAAkC;AAAA,IAAkC;AAAA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"}